plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
    id "net.neoforged.gradle.mixin" version "${neogradle_version}"
}

if (System.getenv('MOD_VERSION') != null) {
    mod_version = System.getenv('MOD_VERSION')
}
version = mod_version

base {
    archivesName = "${mod_id}-${minecraft_version}-neoforge"
}

// Include resources generated by data generators.
sourceSets {
    main {
        java {
            exclude '**/AlmostUnifiedIntegrationImpl.java'
        }
    }
}
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        jvmArguments.addAll('-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions')
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument "--username=LostWorlds"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
//        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()

    maven {
        name = "JEI and AlmostUnified"
        url = 'https://maven.blamejared.com/'
        content {
            includeGroup "mezz.jei"
            includeGroup "com.almostreliable.mods"
        }
    }
    maven {
        name = "Curios Maven"
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup "top.theillusivec4.curios"
        }
    }
    maven {
        name = "Geckolib Maven"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
        content {
            includeGroup "software.bernie.geckolib"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    //Jei
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    //Curios
//    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"
//    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api"

    //geckolib
    implementation "software.bernie.geckolib:geckolib-neoforge-${geckolib_minecraft_version}:${geckolib_version}"

    //Jade
    // Visit https://www.curseforge.com/minecraft/mc-mods/jade/files/all?filter-status=1&filter-game-version=2020709689%3A7498
    // to get the latest version's jade_version
//    implementation fg.deobf("curse.maven:jade-324717:${jade_curse_maven_id}")
}

processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()

            from components.java

            pom {
                name = mod_name
                description = 'A magic mod inspired by the world of Jonathan Stroud\'s Bartimaeus. With the help of occult rituals players can summon entities from the "Other Side" to perform magic.'
                url = 'https://github.com/SennerGit/LostWorlds'
                licenses {
                    license {
                        name = mod_license
                        url = 'https://github.com/SennerGit/LostWorlds#licensing'
                    }
                }
                scm {
                    connection = 'scm:git:ssh:git@github.com:SennerGit/LostWorlds.git'
                    url = 'https://github.com/SennerGit/LostWorlds'
                }
            }
        }
    }
//    repositories {
//        maven {
//            name = "cloudsmith"
//            url = "https://maven.cloudsmith.io/klikli-dev/mods/"
//            def releasesRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
//            def snapshotsRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
//            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//            credentials {
//                username = System.getenv('MAVEN_USER')
//                password = System.getenv('MAVEN_PASS')
//            }
//        }
//    }
}

//increase max errors from 100 to 2000
afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}